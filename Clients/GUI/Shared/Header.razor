@inject AuthStateProvider AuthenticationProvider
@inject Blazored.SessionStorage.ISessionStorageService Storage
@inject IModalService modal
@inject NavigationManager NavigationManager

<div class="header">
    <nav class="navbar navbar-expand-lg navbar-light">
        <a class="navbar-brand pl-5" href="/">
            <img src="Picture/Logo.png" width="30" height="30" class="d-inline-block align-top" alt="">
        </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/">News</a>
                </li>
                <AuthorizeView>
                    <Authorized>
                        <li class="nav-item">
                            <a class="nav-link" href="/instruments">Instruments</a>
                        </li>
                    </Authorized>
                </AuthorizeView>
            </ul>
            <div class="navbar-nav ml-auto">
                <AuthorizeView>
                    <NotAuthorized Context="NotAuth">
                        <button type="button" class="btn btn-outline-secondary mr-2" @onclick="@(() => modal.Show<GUI.Pages.SignIn>())">Sign In</button>

                        <button type="button" class="btn btn-outline-secondary" @onclick="@(() => modal.Show<GUI.Pages.SignUpWizzard>())">Sign up</button>
                    </NotAuthorized>
                    <Authorized>
                        @{
                            LoadImageSrc();
                        }
                        <div class="btn-group dropleft">
                            <a class="navbar-brand" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <img src="@imgSrc" width="30" height="30" class="d-inline-block align-top rounded-circle" alt="Avatar">
                            </a>

                            <div class="dropdown-menu">
                                <a class="dropdown-item align-items-center" href="userinfo">
                                    <a>User Info</a>
                                    <img src="@imgSrc" width="30" height="30" class="align-items-center rounded-circle" alt="Avatar">
                                </a>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" href="/" @onclick="SignOut">Sign out</a>
                            </div>
                        </div>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    </nav>
</div>

@code {
    private string defaultImgSrc = "Picture/Avatar.svg";
    private string imgSrc = "Picture/Avatar.svg";

    private void SignOut()
    {
        Storage.ClearAsync();

        AuthenticationProvider.MarkSignedOut();
    }

    private async void LoadImageSrc()
    {
        //        var userToken = new UserToken
        //      {
        //          Body = await Storage.GetItemAsync<string>("token"),
        //        UserId = await Storage.GetItemAsync<Guid>("id")
        //    };

        //     if (userToken.Body == null)
        //      {
        return;
        //     }

        System.Threading.Thread.Sleep(5);

        UserInfoRequest requestResult;// = await UserGetter.GetUserById(userToken);

        if (requestResult?.Avatar != null)
            imgSrc = AvatarGetter.GetUserImage(requestResult.Avatar, requestResult.AvatarExtension);
        else
            imgSrc = defaultImgSrc;
        StateHasChanged();
    }
}