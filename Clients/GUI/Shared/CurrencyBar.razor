@using System.Net.Http;
@using Newtonsoft.Json;
@using System.Text.Json;
@using JsonSerializerText = System.Text.Json.JsonSerializer;
@using System.Text;
@using System.Net.Http.Json;
<p class="badge-dark" style="margin-bottom:1px">CURRENCY RATE</p>
@if (Rates != null)
{
    @foreach (var r in Rates)
    {
        <div class="text-center container-fluid" style="white-space:nowrap">
            <span class="item i-body">@r.Code</span>
            <span class="item i-body">@r.Value</span>
        </div>
    }
}
@if (Codes == null || Codes.Count == 0 || ErrorFromServer)
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}

@code {
    [Parameter]
    public List<string> Codes { get; set; }

    List<ExchangeRate> Rates { get; set; }

    public bool ErrorFromServer { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (Codes != null && Codes.Count > 1)
        {
            CurrencyRequest req = new CurrencyRequest();
            req.CurrencyPublisher = CurrencyExchangeRateProviderTypes.CentralBank;
            req.CurrencyCodes = Codes;
            string url = "http://localhost:5006/News/currencies";
            string devUrl = "https://194.67.103.237:5007/news/currencies";

            HttpClientHandler clientHandler = new HttpClientHandler();
            clientHandler.ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => { return true; };

            HttpClient client = new HttpClient(clientHandler);

            HttpResponseMessage response = await client.PostAsJsonAsync(
                devUrl, req);

            Rates = await response.Content.ReadFromJsonAsync<List<ExchangeRate>>();
        }
        else
        {
            await base.OnInitializedAsync();
        }
    }
}
